\documentclass{article}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{hyperref}
\begin{document}
\SweaveOpts{concordance=TRUE}
\setlength{\parindent}{0cm}
\newcommand{\eqname}[1]{\tag*{#1}}% Tag equation with name

\section{Model Specification and Background}

We combine the work by \href{http://faculty.baruch.cuny.edu/lwu/papers/timechangeLevy_JFE2004.pdf}{Carr and Wu (2004)} and the work of \href{https://www.darrellduffie.com/uploads/pubs/DuffiePanSingleton2000.pdf}{Duffie, Pan, and Singleton (2000)} to create a very general framework for option pricing.  The fundamental assumption is that the underlying asset follows a Levy process with a stochastic clock.  Many popular models are contained within this assumption including the \href{http://www.ressources-actuarielles.net/EXT/ISFA/1226.nsf/0/306439500f660d9fc12574860059ce30/$FILE/338705.pdf}{CGMY} model, the Heston model, and the Black Scholes model.  The assumption allows us to construct an analytical or semi-analytical characteristic function which can be inverted to obtain option prices.

\subsection{Practical Constraints}

The stochastic clock (which can be interpreted as ``trading time'' as apposed to ``calendar time'') must be positive and increasing.  The work by Carr and Wu shows that one can generate a characteristic function that incorporates correlation between the stochastic clock and the underlying asset as long as the clock and the asset have similar Levy processes.  More precisely, correlation can only be induced if both the clock and the asset have either diffusion processes, finite activity processes, or infinite activity processes.  Since the stochastic clock must always be increasing, it is common to model the stochastic process as an integral of a function of the asset price.  For example, Heston's model can be interpreted as an asset following a Brownian Motion with a clock that follows an integrated Cox Ingersoll Ross (CIR) process, with the asset's Brownian Motion being correlated with the clock's Brownian Motion.  
\\
\\
In a now classic paper, \href{http://www.ressources-actuarielles.net/EXT/ISFA/1226.nsf/0/306439500f660d9fc12574860059ce30/$FILE/338705.pdf}{Carr, Madan, Geman, and Yor (2003)} demonstrate that asset prices may not have a diffusion component and can be modeled as a pure jump process with infinite activity.  However, \href{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.199.2574&rep=rep1&type=pdf}{Wu and Huang (2004)} show that when accounting for the leverage effect, the diffusion component does have a significant impact.  This is due to the empirical fact that asset returns and asset volatility are correlated.  More recent research by \href{https://poseidon01.ssrn.com/delivery.php?ID=737027111000006077113070089110095064016020050037028066000080065074127006086092092026061120060015055036110006010126103066122080108059078076004070004065091125021108014077028121011029092117112080127092065007111098070065099086069122086067104098093017117&EXT=pdf&INDEX=TRUE}{Ballotta and Rayee (2018)} shows how to incorporate a correlation between pure-jump CGMY processes by using only the negative jumps to generate stochastic volatility that is correlated with the asset returns.
\\
\\
An excellent overview of the various methods for inducing correlation and the possible models is \href{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.199.2574&rep=rep1&type=pdf}{Wu and Huang (2004)}.  

\subsection{Specification of Stochastic Volatility}
Following Carr and Wu, we specify the stochastic time change rather than directly specifying the volatility.  The time change is assumed to take the following form: 

\[\tau=\int_0^t v_s ds \]
\[v_t=v_0 +\int_0^t a(1-k v_s) ds + \int_0^t \eta \sqrt{v_s} dW^2(s) - \delta \int_0 ^t dN(s)\]
Where \(N(s)\) is a pure-jump process.  Following Carr and Wu, we set the parameters such that the long run expectation of \(v_t\) is \(1\).  To adjust the drift to make the long run expectation of \(v_t\) be \(1\), we adjust the drift as follows: \(a\left(1-\left(1-\frac{\delta\mathbb{E}[N_s]}{as}\right)v_s\right)\) where for simplicity we let \(k=1-\frac{\delta\mathbb{E}[N_s]}{as}\).

\subsection{Specification of the Asset Price Dynamics}

We assume the log asset price is one of the following time-changed processes under the risk-neutral measure:

\begin{enumerate}
\item Heston: \(dS_\tau=rS_\tau dt+\sigma_1 S_\tau dW^1(\tau)\), \(\delta=0\), \(dW^1(t) dW^2(t) =\rho dt\)
\item Time-changed Merton: \(dS_\tau=(r-\lambda \mathbb{E}[Z] v_t)S_\tau dt+\sigma_1 S_\tau dW(\tau)+S_\tau dN(\tau)\) where \(N(\cdot)\) is a Poisson process with Gaussian jumps \(Z\) and \(\delta=0\).
\item Time-changed CGMY: \(dS_\tau=S_\tau \left(r-\mu_{cgmy}v_t \right)dt+\sigma_1 S_\tau dW(\tau)+S_\tau d\kappa(t)\) where \(\kappa(\cdot)\) is a CGMY process and \(\delta=0\).
\item Self-exciting CGMY: \(dS_\tau=S_\tau \left(r-\sigma_2\mu_{cmy} v_t\right)dt+\sigma_2 S_\tau d\kappa(\tau)\) with \(\delta>0\), \(\eta=0\) and the pure-jump part of the time-changed process is the negative of the negative jump part of the CGMY process.
\end{enumerate}
Where \(\mu_{cgmy}=C \Gamma(1-Y)\left(M^{Y-1}-G^{Y-1}\right)\) and \(\mu_{cmy}= C\Gamma(1-Y)M^{Y-1}\).  Note that the self-exciting CGMY process is only possible since the CGMY distribution can be decomposed into positive and negative jumps. Note also that the change of measure between the real-world and risk-neutral measures is possible via an Esscher transform that remains a Levy process after transformation.   While in general there is no guarantee that this change will retain the dynamics of the process, for the processes considered here the Esscher transform keeps the same dynamics with different parameterization.     

\subsection{Risk Neutral Log Asset Dynamics}

Following Carr and Wu, the risk neutral log price can be modeled as follows (note that the market is incomplete):
\[x_t=\mathrm{log}\left(\frac{S_\tau}{S_0}\right)=rt-\int_0^t \left(\frac{\sigma_1^2}{2}+\psi_l(-i\sigma_2)\right)v_s dt+\sigma_1 W^1(\tau)+\sigma_2\int_0 ^ t d N(\tau)\]
Where \(\psi_l(u)\) is the log of the characteristic function (divided by \(t\)) of \(N(t)\).  When \(N(t)\) is a CGMY process, \[\psi_l(u)=C\Gamma(-Y)\left((M-iu)^Y-M^Y+(G+iu)^Y-G^Y\right)\]  When \(N(t)\) is a Merton jump, \(\psi_l(u)=\lambda\left(e^{ui\mu_l-\frac{ u^2 \sigma_l^2}{2}}-1\right)\).

\subsection{Analytical Characteristic Function}

Following Carr and Wu, \(x_t\) has the following characteristic function:

\[\phi_x(u)=\mathbb{\hat{E}}\left[ e^{ui rt} e^{\tau \psi(u)} \right]\]

Where 
\[\psi(u)= \psi_l(u)-\frac{\sigma_1^2}{2} u^2-\left(\frac{\sigma_1^2}{2}+\psi_l(-i\sigma_2)\right)ui \] 


Under \(\mathbb{\hat{P}}\), \(v_s\) has the following dynamics:

\[v_t=v_0+\int_0 ^ t a\left(1-\left(k-\frac{iu \rho \sigma_1 \eta}{a}\right)v_s\right)ds +\int_0^t \eta \sqrt{v_s} d\hat{W}^2_s - \delta \int_0^t d\hat{N}_s\]

Where \(\hat{N}_t\) has log characteristic function \(\hat{\psi}(z)_N= \psi_{l,-}(z+\sigma_2 u)-\psi_{l, -}(\sigma_2 u) \) and \(\psi_{l,-}\) is the characteristic function of the negative jumps of \(N_t\).  For a CGMY process, \(\psi_{l, -}=C\Gamma(-Y)\left((M-iu)^Y-M^Y\right)\).  By Duffie, Pan, and Singleton (2000), such a characteristic function has a semi-analytical solution.  

\subsection{ODE for Characteristic Function}

\subsubsection{General Case}
Consider the following functions:

\[\mu(x)=K_0+K_1 x,\, \sigma_1^2(x)=H_0+H_1 x,\, \lambda(x)=l_0+l_1 x,\, R(x)=\rho_0+\rho_1 x\]

By Duffie, Pan, and Singleton (2000), for processes \(X_t\) defined as 
\[X_t=X_0+\int _0 ^ t \mu(X_s) ds + \int _0^t \sigma(X_s) dW_s-\delta \int_0^t dN_s\]
the following holds:

\[g(u, x, t, T):=\mathbb{E}\left[e^{-\int_t ^ T R(X_s) ds} e^{cX_T}\right]\]

has solution

\[e^{\alpha(t)+\beta(t) x}\]

where 

\[\beta'(t) = \rho_1- K_1 \beta(t)-\frac{\beta^2(t)H_1}{2}- \psi_N(i\delta \beta(t)) \]
\[\alpha'(t) = \rho_0- K_0 \beta(t)-\frac{\beta^2(t)H_0}{2} \]

with \(\beta(T)=c,\,\alpha(T)=0\).

\subsubsection{Application to the Analytical Characteristic Function}

The process \(v_t\) under \(\mathbb{\hat{P}}\) has this same structure with the following parameters:

\[K_0=a,\,K_1=-a\left(k-\frac{iu\rho\sigma_1\eta}{a}\right)\]
\[H_0=0,\,H_1=\eta^2\]
\[ \psi_N(v)=\psi_l(v+\sigma_2 u)-\psi_l(u\sigma_2)\]
\[\rho_0=0,\, \rho_1=-\psi(u\sigma_2) \]
\[c=0\]

Substituting and simplifying yields the following ODEs:
\[\beta'(t) = -\psi(u\sigma_2) +\left(a-\delta \mathbb{E}[N_t]/t-iu\rho\sigma_1\eta \right) \beta(t)-\frac{\beta^2(t)\eta^2}{2}+\psi_l(\sigma_2 u)- \psi_l(i\delta \beta(t)+\sigma_2 u) \]
\[\alpha'(t) = - a \beta(t) \]

with \(\beta(T)=0,\,\alpha(T)=0\).

\subsubsection{Solution to the ODEs}
The ODEs do not in general have an analytical solution.  However in the case of the Heston, Merton, and extended CGMY processes the solution to the ODEs reduces to a (complex valued) Cox Ingersoll Ross (CIR) process.  In these three cases there is an analytical solution.  For the self-exciting CGMY process there is no known analytical solution and numerical solutions must be used.

\section{Analytical formulation}

For the Heston, Merton, and extended CGMY models, the clock is specified as follows:

\subsection{Clock}

\[\tau=\int_0^t v_s ds \]
\[v_t=v_0 +\int_0^t a(1-k v_s) ds + \int_0^t \eta \sqrt{v_s} dW^2_s \]
This is a CIR process with long run expectation of one.  The CIR bond pricing formula can be interpreted as the moment generating function of the integral of a CIR process, and the analytical expression is leveraged to compute the generalized characteristic function for the time-changed asset price.

\subsection{Characteristic Function with CIR time-changes}

Following Carr and Wu, the full time changed \(x_t\) has the following characteristic function:

\[\phi_x(u)=\mathbb{\hat{E}}\left[ e^{ui rt} e^{\tau \psi(u)} \right]\]

Under \(\mathbb{\hat{P}}\), \(v_s\) has the following dynamics:

\[v_t=v_0+\int_0 ^ t a\left(1-\left(k-\frac{iu \rho \sigma_1 \eta}{a}\right)v_s\right)ds +\int_0^t \eta \sqrt{v_s} d\hat{W}^2_s\]

Since \(\psi\) is deterministic, the characteristic function can be written as follows:

\[\mathbb{E}[e^{ui X_t}]=g(-\psi(u), a, a-\sigma_v \rho u \sigma_1, \sigma_v, v_0)  \]

Where \(X_t=\mathrm{log}\left(\frac{S_t}{S_0}\right)-rt \), and \(g\) is the moment generating function of an integrated CIR process:

\[g(x, a, \kappa, \sigma_v, v_0)=e^{-b(t)v_0-c(t)}\]
Where 
\[b(t)=2x\left(1-e^{-\delta t}\right)/\left(\delta+\kappa+(\delta-\kappa) e^{-\delta t}\right)\]
\[c(t)=\left(\frac{a}{\sigma^2}\right)\left(2\mathrm{log}\left(1+(\kappa-\delta)\left(1-e^{-\delta t}\right)/2\delta \right) +\left(1-e^{-\delta t}\right)(\kappa-\delta)\right)\]
\[\delta=\sqrt{\kappa^2+2x \sigma_v^2}\]


\section{Methodology for Option Pricing}

The methodology for option pricing uses the \href{http://ta.twi.tudelft.nl/mf/users/oosterle/oosterlee/COS.pdf}{Fang-Oosterlee} framework.  The code is used in the \href{https://github.com/danielhstahl/fang_oost_option_rust}{fang\_oost\_rust} library, with the characteristic functions defined in \href{https://github.com/danielhstahl/cf_functions_rust}{cf\_functions\_rust}.

\section{Simulation}

To check that our option pricing methodology is implemented appropriately, we perform a Monte Carlo simulation:

<<>>=
## Set variables
set.seed(41)
r=.03
sig=.2
sigL=.1
muL=-.05
rho=-.5
lambda=.5 #one jumps every two years on average
a=.3
eta=.2
v0=.9
s0=50
k=50
n=1000000 #number of options to simulate
m=1000 #number of items per path
t=1
dt=t/(m)
@

<<echo=FALSE>>=
## Define helper functions
simulateGaussJump=function(numJumps){
  if(numJumps>0){
    return(sum(rnorm(numJumps, muL, sigL)))
  }
  else{
    return(0)
  }
}

generatePricePath=function(m, type){
  s=s0
  v=v0
  w2=rnorm(m)
  w1=w2*rho+rnorm(m)*sqrt(1-rho*rho)
  for(j in c(1:m)){
    numJ=rpois(1, v*lambda*dt)
    s=s*exp(r*dt-sig*sig*.5*v*dt-lambda*v*dt*(exp(muL+.5*sigL*sigL)-1)+sqrt(abs(v)*dt)*sig*w1[j]+simulateGaussJump(numJ))
    v=v+a*(1-v)*dt+eta*sqrt(abs(v)*dt)*w2[j]
  }
  if(type=='option'){
    if(s>k){
      return(s-k)
    }
    else{
      return(0)
    }
  }
  else{
    return(s)
  }
}
@

<<echo=FALSE>>=
# Generate option prices and compute bounds
optionPrices=sapply(c(1:n), function(index){
  return(generatePricePath(m, 'option'))
})
price=exp(-r*t)*mean(optionPrices)
bounds=qnorm(.95)*sd(optionPrices)/sqrt(n-1)
priceLow=price-bounds
priceHigh=price+bounds
@

<<>>=
## Results
print(priceLow)
print(priceHigh)
@

This simulation creates bounds that are used to ensure that the numerical implementation of the characteristic function is accurate.  For more details, see the integration tests inside the \href{https://github.com/realoptions/option_price_faas/blob/ba904c30ed053c8652541ea9033dcab9889f4f4a/src/lib/pricing_maps.rs#L767}{option\_price\_faas} repo.  


\end{document}