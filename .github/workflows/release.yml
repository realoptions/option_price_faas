name: release
on:
  push:
    branches:
      master
env:
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1
  PROJECT_ID: finside #use this as source of truth instead of terraform.tfvars
  CUSTOM_GCP_DOMAIN: api2.finside.org
  CUSTOM_RAPID_API_DOMAIN: api3.finside.org
  MAJOR_VERSION: v2
  SERVICE_NAME: realoptions2
  SERVICE_AUTH_NAME: realoptions2-auth

jobs:
  release: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: nightly

    - name: Build
      run: cargo build
    - name: Run tests nightly
      run: |
        cargo test

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS}}
        export_default_credentials: true
        project_id: ${{ env.PROJECT_ID }}
    # Build and push image to Google Container Registry
    # see https://cloud.google.com/container-registry/docs/advanced-authentication#json-key
    - name: Build
      run: |
        cat ${GOOGLE_APPLICATION_CREDENTIALS} | docker login -u _json_key --password-stdin https://gcr.io
        docker build . -f docker/option_price.Dockerfile --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

        docker build . -f docker/option_price_auth.Dockerfile --tag gcr.io/$PROJECT_ID/$SERVICE_AUTH_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_AUTH_NAME:$GITHUB_SHA

    - name: terraform 
      run: |
        cd terraform
        terraform init
        TF_LOG=debug terraform apply -auto-approve -var="custom_gcp_domain=$CUSTOM_GCP_DOMAIN" -var="custom_rapid_api_domain=$CUSTOM_RAPID_API_DOMAIN" -var="gcp_api_version=$GCP_VERSION" -var="rapid_api_version=$RAPID_API_VERSION" -var="project=$PROJECT_ID" -var="github_sha=$GITHUB_SHA" -var="service_name=$SERVICE_NAME" -var="service_name_auth=$SERVICE_AUTH_NAME"
        cd ..
    - name: templatize yml
      run: |
        cd terraform
        VISIBLE_HOST=$CUSTOM_GCP_DOMAIN VERSION_MAJOR=$MAJOR_VERSION HOST=$(terraform output realoptions_gateway_url) source /dev/stdin <<<"$(echo 'cat <<EOF >final.yml'; cat ../docs/openapi_gcp.yml; echo EOF;)"
        mv -f final.yml ../docs/openapi_gcp.yml
        cat ../docs/openapi_gcp.yml
        cd ..

        VISIBLE_HOST=$CUSTOM_RAPID_API_DOMAIN VERSION_MAJOR=$MAJOR_VERSION source /dev/stdin <<<"$(echo 'cat <<EOF >final.yml'; cat ../docs/openapi_rapidapi.yml; echo EOF;)"
        mv -f final.yml ../docs/openapi_rapidapi.yml   

    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
      id: tag_bump

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_bump.outputs.new_tag }}
        release_name: Release ${{ steps.tag_bump.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload rapidapi yaml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./docs/openapi_rapidapi.yml
        asset_name: openapi_rapidapi.yml
        asset_content_type: text/yaml

    - name: Upload gcp yaml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./docs/openapi_gcp.yml
        asset_name: openapi_gcp.yml
        asset_content_type: text/yaml

    - name: provision rapid api
      run: |
        curl --request POST 
        --url https://openapi-provisioning.p.rapidapi.com/v1/apis 
        --header 'content-type: multipart/form-data' 
        --header 'x-rapidapi-host: openapi-provisioning.p.rapidapi.com' 
        --header 'x-rapidapi-key: ${{ secrets.RAPID_API_TOKEN }}' 
        --form 'file=@docs/openapi_rapidapi.yml'

    - name: kickoff main site job
      run: |
        curl -s -X POST \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token  ${{ secrets.ACCESS_TOKEN }}" \
          -d '{"event_type": "on-demand-test"}' \
          https://api.github.com/repos/realoptions/developer_site/dispatches

    
