name: release
on:
  push:
    tags:
    - '*'
env:
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1
  PROJECT_ID: finside #use this as source of truth instead of terraform.tfvars
  CUSTOM_DOMAIN: api2.finside.org
  VERSION_MAJOR: 2
  SERVICE_NAME: realoptions
  SERVICE_GATEWAY_NAME: realoptions-gateway
  SERVICE_GATEWAY_URL: realoptions-gateway-lnmfgwrxtq-uc.a.run.app 
  RUN_REGION: us-central1
jobs:
  release: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: nightly

    - name: Build
      run: cargo build
    - name: Run tests nightly
      run: |
        cargo test

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS}}
        export_default_credentials: true
        project_id: ${{ env.PROJECT_ID }}
    # Build and push image to Google Container Registry
    # see https://cloud.google.com/container-registry/docs/advanced-authentication#json-key
    - name: Build
      run: |
        cat ${GOOGLE_APPLICATION_CREDENTIALS} | docker login -u _json_key --password-stdin https://gcr.io
        docker build . -f docker/option_price.Dockerfile --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    # Deploy rust app to Cloud Run
    - name: Deploy
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $RUN_REGION \
          --platform managed 
    
    - name: Gateway service configuration
      run: |
        VISIBLE_HOST=$SERVICE_GATEWAY_URL HOST=$SERVICE_GATEWAY_URL source /dev/stdin <<<"$(echo 'cat <<EOF >gatewayservice.yml'; cat ./docs/openapi_v2.yml; echo EOF;)"
        gcloud endpoints services deploy gatewayservice.yml --project $PROJECT_ID

    # Hacky, but it works
    - name: Build API Gateway
      run: |
        GATEWAY_CONFIG=$(gcloud endpoints configs list --service ${SERVICE_GATEWAY_URL} --limit 1 \
          | grep $(date +'%Y-%m-%d') | head -n1 | awk '{print $1;}')
        curl --fail -o "service.json" -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          "https://servicemanagement.googleapis.com/v1/services/${GATEWAY_SERVICE}/configs/${GATEWAY_CONFIG}?view=FULL" 
        docker build . -f docker/gateway.Dockerfile --tag gcr.io/${PROJECT_ID}/${SERVICE_GATEWAY_NAME}:$GITHUB_SHA
        docker push gcr.io/${PROJECT_ID}/${SERVICE_GATEWAY_NAME}:$GITHUB_SHA

    - name: Deploy Gateway
      run: |
        gcloud run deploy ${SERVICE_GATEWAY_NAME} \
          --image=gcr.io/${PROJECT_ID}/${SERVICE_GATEWAY_NAME}:$GITHUB_SHA \
          --set-env-vars=ESPv2_ARGS=--cors_preset=basic \
          --allow-unauthenticated \
          --platform managed \
          --project $PROJECT_ID \
          --region $RUN_REGION 

    - name: Policy binding
      run: |
        gcloud run services add-iam-policy-binding $SERVICE_NAME \
          --member "serviceAccount:${{secrets.ESP_PROJECT_NUMBER}}-compute@developer.gserviceaccount.com" \
          --role "roles/run.invoker" \
          --platform managed \
          --region $RUN_REGION  \
          --project ${PROJECT_ID}

    - name: templatize yml
      run: |
        VISIBLE_HOST=$CUSTOM_DOMAIN HOST=$SERVICE_GATEWAY_URL source /dev/stdin <<<"$(echo 'cat <<EOF >final.yml'; cat ./docs/openapi_v2.yml; echo EOF;)"
        mv -f final.yml ./docs/openapi_v2.yml
        cat docs/openapi_v2.yml

    # had to add service account to verified owners, see https://cloud.google.com/run/docs/mapping-custom-domains
    # this will error if custom domain already exists, so || true at the end
    - name: Custom domain
      run: |
        gcloud beta run domain-mappings create --service $SERVICE_NAME \
          --domain $CUSTOM_DOMAIN --platform managed --region $RUN_REGION  \
          --project ${PROJECT_ID} || true

    - name: release files
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./target/x86_64-unknown-linux-musl/release/*,./serverless.yml,./docs/openapi_v2.yml"
        token: ${{ secrets.ACCESS_TOKEN }}
    - name: kickoff main site job
      run: |
        curl -s -X POST \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token  ${{ secrets.ACCESS_TOKEN }}" \
          -d '{"event_type": "on-demand-test"}' \
          https://api.github.com/repos/realoptions/developer_site/dispatches


